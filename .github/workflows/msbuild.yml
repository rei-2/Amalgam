name: MSBuild

on: [push, pull_request]

jobs:
  msbuild:
    runs-on: windows-latest

    strategy:
      matrix:
        configuration: [Release, ReleaseAVX2, ReleaseFreetype, ReleaseFreetypeAVX2]
        platform: [x64]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Install Windows SDK
      run: |
        Write-Host "Installing Windows 11 SDK (10.0.22621.0)..."

        # Download and install Windows 11 SDK
        $url = "https://download.microsoft.com/download/3/f/1/3f1d6d1a-0c86-4fb1-8e5b-e9e7d48ee1c1/windowssdk/winsdksetup.exe"
        $installer = "$env:TEMP\winsdksetup.exe"

        Write-Host "Downloading Windows SDK installer..."
        Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing

        Write-Host "Installing Windows SDK with Desktop C++ components..."
        # Install with Desktop Development components
        Start-Process -FilePath $installer -ArgumentList "/quiet", "/features", "OptionId.WindowsDesktopDebuggers", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.WindowsPerformanceToolkit" -Wait

        Write-Host "Windows SDK installation completed"

        # Verify installation
        $sdkPath = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22621.0"
        if (Test-Path $sdkPath) {
          Write-Host "✓ Windows SDK 10.0.22621.0 installed successfully"
        } else {
          Write-Host "⚠ Windows SDK path not found, checking alternative locations..."
          Get-ChildItem "${env:ProgramFiles(x86)}\Windows Kits\10\bin\" -ErrorAction SilentlyContinue
        }
      shell: powershell

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Setup vcpkg
      run: |
        if (!(Test-Path "vcpkg")) {
          Write-Host "Cloning vcpkg..."
          git clone https://github.com/Microsoft/vcpkg.git
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Failed to clone vcpkg"
            exit 1
          }
        } else {
          Write-Host "vcpkg directory already exists"
        }

        cd vcpkg

        if (!(Test-Path "vcpkg.exe")) {
          Write-Host "Bootstrapping vcpkg..."
          .\bootstrap-vcpkg.bat
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Failed to bootstrap vcpkg"
            exit 1
          }
        } else {
          Write-Host "vcpkg.exe already exists"
        }

        Write-Host "Installing cpr:x64-windows-static..."
        .\vcpkg.exe install cpr:x64-windows-static
        if ($LASTEXITCODE -ne 0) {
          Write-Host "ERROR: Failed to install cpr"
          exit 1
        }

        Write-Host "Installing nlohmann-json:x64-windows-static..."
        .\vcpkg.exe install nlohmann-json:x64-windows-static
        if ($LASTEXITCODE -ne 0) {
          Write-Host "ERROR: Failed to install nlohmann-json"
          exit 1
        }

        Write-Host "Integrating vcpkg with Visual Studio..."
        .\vcpkg.exe integrate install
        if ($LASTEXITCODE -ne 0) {
          Write-Host "WARNING: Failed to integrate vcpkg with Visual Studio"
        }
      shell: powershell

    - name: Restore NuGet packages
      run: nuget restore Amalgam.sln

    - name: Build
      run: msbuild Amalgam.sln /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }}

    - uses: actions/upload-artifact@v4
      with:
        name: Amalgam${{ matrix.platform }}${{ matrix.configuration }}
        path: |
          output/${{ matrix.platform }}/${{ matrix.configuration }}/*.dll
          output/${{ matrix.platform }}/${{ matrix.configuration }}/*.exe

    - uses: actions/upload-artifact@v4
      with:
        name: Amalgam${{ matrix.platform }}${{ matrix.configuration }}PDB
        path: output/${{ matrix.platform }}/${{ matrix.configuration }}/*.pdb